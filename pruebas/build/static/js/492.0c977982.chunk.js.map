{"version":3,"file":"static/js/492.0c977982.chunk.js","mappings":"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","sources":["../dicomParser/webpack/universalModuleDefinition","../dicomParser/external \"zlib\"","../dicomParser/util/util.js","../dicomParser/util/parseTM.js","../dicomParser/util/parseDA.js","../dicomParser/util/elementToString.js","../dicomParser/util/dataSetToJS.js","../dicomParser/util/createJPEGBasicOffsetTable.js","../dicomParser/readTag.js","../dicomParser/findEndOfEncapsulatedPixelData.js","../dicomParser/findAndSetUNElementLength.js","../dicomParser/byteArrayParser.js","../dicomParser/dataSet.js","../dicomParser/findItemDelimitationItem.js","../dicomParser/readDicomElementImplicit.js","../dicomParser/readSequenceItem.js","../dicomParser/readSequenceElementImplicit.js","../dicomParser/readSequenceElementExplicit.js","../dicomParser/readDicomElementExplicit.js","../dicomParser/parseDicomDataSet.js","../dicomParser/alloc.js","../dicomParser/version.js","../dicomParser/bigEndianByteArrayParser.js","../dicomParser/sharedCopy.js","../dicomParser/byteStream.js","../dicomParser/littleEndianByteArrayParser.js","../dicomParser/readPart10Header.js","../dicomParser/parseDicom.js","../dicomParser/readEncapsulatedPixelDataFromFragments.js","../dicomParser/readEncapsulatedImageFrame.js","../dicomParser/readEncapsulatedPixelData.js","../dicomParser/index.js","../dicomParser/webpack/bootstrap"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"zlib\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"dicom-parser\", [\"zlib\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"dicom-parser\"] = factory(require(\"zlib\"));\n\telse\n\t\troot[\"dicomParser\"] = factory(root[\"zlib\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","const stringVrs = {\n  AE: true,\n  AS: true,\n  AT: false,\n  CS: true,\n  DA: true,\n  DS: true,\n  DT: true,\n  FL: false,\n  FD: false,\n  IS: true,\n  LO: true,\n  LT: true,\n  OB: false,\n  OD: false,\n  OF: false,\n  OW: false,\n  PN: true,\n  SH: true,\n  SL: false,\n  SQ: false,\n  SS: false,\n  ST: true,\n  TM: true,\n  UI: true,\n  UL: false,\n  UN: undefined, // dunno\n  UR: true,\n  US: false,\n  UT: true\n};\n\n/**\n * Tests to see if vr is a string or not.\n * @param vr\n * @returns true if string, false it not string, undefined if unknown vr or UN type\n */\nconst isStringVr = (vr) => stringVrs[vr];\n\n/**\n * Tests to see if a given tag in the format xggggeeee is a private tag or not\n * @param tag\n * @returns {boolean}\n * @throws error if fourth character cannot be parsed\n */\nconst isPrivateTag = (tag) => {\n  const lastGroupDigit = parseInt(tag[4], 16);\n  if (isNaN(lastGroupDigit)) {\n    throw 'dicomParser.isPrivateTag: cannot parse last character of group';\n  }\n  const groupIsOdd = (lastGroupDigit % 2) === 1;\n\n  return groupIsOdd;\n};\n\n/**\n * Parses a PN formatted string into a javascript object with properties for givenName, familyName, middleName, prefix and suffix\n * @param personName a string in the PN VR format\n * @param index\n * @returns {*} javascript object with properties for givenName, familyName, middleName, prefix and suffix or undefined if no element or data\n */\nconst parsePN = (personName) => {\n  if (personName === undefined) {\n    return undefined;\n  }\n  const stringValues = personName.split('^');\n\n\n  return {\n    familyName: stringValues[0],\n    givenName: stringValues[1],\n    middleName: stringValues[2],\n    prefix: stringValues[3],\n    suffix: stringValues[4]\n  };\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN\n};\n","/**\n * Parses a TM formatted string into a javascript object with properties for hours, minutes, seconds and fractionalSeconds\n * @param {string} time - a string in the TM VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} javascript object with properties for hours, minutes, seconds and fractionalSeconds or undefined if no element or data.  Missing fields are set to undefined\n */\nexport default function parseTM (time, validate) {\n  if (time.length >= 2) { // must at least have HH\n    // 0123456789\n    // HHMMSS.FFFFFF\n    const hh = parseInt(time.substring(0, 2), 10);\n    const mm = time.length >= 4 ? parseInt(time.substring(2, 4), 10) : undefined;\n    const ss = time.length >= 6 ? parseInt(time.substring(4, 6), 10) : undefined;\n\n    const fractionalStr = time.length >= 8 ? time.substring(7, 13) : undefined;\n    const ffffff = fractionalStr ? (parseInt(fractionalStr, 10) * Math.pow(10, 6 - fractionalStr.length)) : undefined;\n\n    if (validate) {\n      if ((isNaN(hh)) ||\n        (mm !== undefined && isNaN(mm)) ||\n        (ss !== undefined && isNaN(ss)) ||\n        (ffffff !== undefined && isNaN(ffffff)) ||\n        (hh < 0 || hh > 23) ||\n        (mm && (mm < 0 || mm > 59)) ||\n        (ss && (ss < 0 || ss > 59)) ||\n        (ffffff && (ffffff < 0 || ffffff > 999999))) {\n        throw `invalid TM '${time}'`;\n      }\n    }\n\n    return {\n      hours: hh,\n      minutes: mm,\n      seconds: ss,\n      fractionalSeconds: ffffff\n    };\n  }\n\n  if (validate) {\n    throw `invalid TM '${time}'`;\n  }\n\n  return undefined;\n}\n","// algorithm based on http://stackoverflow.com/questions/1433030/validate-number-of-days-in-a-given-month\nfunction daysInMonth (m, y) { // m is 0 indexed: 0-11\n  switch (m) {\n  case 2 :\n    return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;\n  case 9 : case 4 : case 6 : case 11 :\n    return 30;\n  default :\n    return 31;\n  }\n}\n\nfunction isValidDate (d, m, y) {\n  // make year is a number\n  if (isNaN(y)) {\n    return false;\n  }\n\n  return m > 0 && m <= 12 && d > 0 && d <= daysInMonth(m, y);\n}\n\n\n/**\n * Parses a DA formatted string into a Javascript object\n * @param {string} date a string in the DA VR format\n * @param {boolean} [validate] - true if an exception should be thrown if the date is invalid\n * @returns {*} Javascript object with properties year, month and day or undefined if not present or not 8 bytes long\n */\nexport default function parseDA (date, validate) {\n  if (date && date.length === 8) {\n    var yyyy = parseInt(date.substring(0, 4), 10);\n    var mm = parseInt(date.substring(4, 6), 10);\n    var dd = parseInt(date.substring(6, 8), 10);\n\n    if (validate) {\n      if (isValidDate(dd, mm, yyyy) !== true) {\n        throw `invalid DA '${date}'`;\n      }\n    }\n\n    return {\n      year: yyyy,\n      month: mm,\n      day: dd\n    };\n  }\n  if (validate) {\n    throw `invalid DA '${date}'`;\n  }\n\n  return undefined;\n}\n","import * as util from './util.js';\n\n/**\n * Converts an explicit VR element to a string or undefined if it is not possible to convert.\n * Throws an error if an implicit element is supplied\n * @param dataSet\n * @param element\n * @returns {*}\n */\nexport default function explicitElementToString (dataSet, element) {\n  if (dataSet === undefined || element === undefined) {\n    throw 'dicomParser.explicitElementToString: missing required parameters';\n  }\n  if (element.vr === undefined) {\n    throw 'dicomParser.explicitElementToString: cannot convert implicit element to string';\n  }\n  var vr = element.vr;\n  var tag = element.tag;\n\n  var textResult;\n\n  function multiElementToString (numItems, func) {\n    var result = '';\n\n    for (var i = 0; i < numItems; i++) {\n      if (i !== 0) {\n        result += '/';\n      }\n      result += func.call(dataSet, tag, i).toString();\n    }\n\n    return result;\n  }\n\n  if (util.isStringVr(vr) === true) {\n    textResult = dataSet.string(tag);\n  } else if (vr === 'AT') {\n    var num = dataSet.uint32(tag);\n\n    if (num === undefined) {\n      return undefined;\n    }\n    if (num < 0) {\n      num = 0xFFFFFFFF + num + 1;\n    }\n\n    return `x${num.toString(16).toUpperCase()}`;\n  } else if (vr === 'US') {\n    textResult = multiElementToString(element.length / 2, dataSet.uint16);\n  } else if (vr === 'SS') {\n    textResult = multiElementToString(element.length / 2, dataSet.int16);\n  } else if (vr === 'UL') {\n    textResult = multiElementToString(element.length / 4, dataSet.uint32);\n  } else if (vr === 'SL') {\n    textResult = multiElementToString(element.length / 4, dataSet.int32);\n  } else if (vr === 'FD') {\n    textResult = multiElementToString(element.length / 8, dataSet.double);\n  } else if (vr === 'FL') {\n    textResult = multiElementToString(element.length / 4, dataSet.float);\n  }\n\n  return textResult;\n}\n","import explicitElementToString from './elementToString.js';\nimport * as util from './util.js';\n\n/**\n * converts an explicit dataSet to a javascript object\n * @param dataSet\n * @param options\n */\nexport default function explicitDataSetToJS (dataSet, options) {\n  if (dataSet === undefined) {\n    throw 'dicomParser.explicitDataSetToJS: missing required parameter dataSet';\n  }\n\n  options = options || {\n    omitPrivateAttibutes: true, // true if private elements should be omitted\n    maxElementLength: 128 // maximum element length to try and convert to string format\n  };\n\n  var result = {\n\n  };\n\n  for (var tag in dataSet.elements) {\n    var element = dataSet.elements[tag];\n\n    // skip this element if it a private element and our options specify that we should\n    if (options.omitPrivateAttibutes === true && util.isPrivateTag(tag)) {\n      continue;\n    }\n\n    if (element.items) {\n      // handle sequences\n      var sequenceItems = [];\n\n      for (var i = 0; i < element.items.length; i++) {\n        sequenceItems.push(explicitDataSetToJS(element.items[i].dataSet, options));\n      }\n      result[tag] = sequenceItems;\n    } else {\n      var asString;\n\n      asString = undefined;\n      if (element.length < options.maxElementLength) {\n        asString = explicitElementToString(dataSet, element);\n      }\n\n      if (asString !== undefined) {\n        result[tag] = asString;\n      } else {\n        result[tag] = {\n          dataOffset: element.dataOffset,\n          length: element.length\n        };\n      }\n    }\n  }\n\n  return result;\n}\n","// Each JPEG image has an end of image marker 0xFFD9\nfunction isEndOfImageMarker (dataSet, position) {\n  return (dataSet.byteArray[position] === 0xFF &&\n  dataSet.byteArray[position + 1] === 0xD9);\n}\n\nfunction isFragmentEndOfImage (dataSet, pixelDataElement, fragmentIndex) {\n  var fragment = pixelDataElement.fragments[fragmentIndex];\n  // Need to check the last two bytes and the last three bytes for marker since odd length\n  // fragments are zero padded\n\n  if (isEndOfImageMarker(dataSet, fragment.position + fragment.length - 2) ||\n    isEndOfImageMarker(dataSet, fragment.position + fragment.length - 3)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction findLastImageFrameFragmentIndex (dataSet, pixelDataElement, startFragment) {\n  for (var fragmentIndex = startFragment; fragmentIndex < pixelDataElement.fragments.length; fragmentIndex++) {\n    if (isFragmentEndOfImage(dataSet, pixelDataElement, fragmentIndex)) {\n      return fragmentIndex;\n    }\n  }\n}\n\n/**\n * Creates a basic offset table by scanning fragments for JPEG start of image and end Of Image markers\n * @param {object} dataSet - the parsed dicom dataset\n * @param {object} pixelDataElement - the pixel data element\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {Array} basic offset table (array of offsets to beginning of each frame)\n */\nexport default function createJPEGBasicOffsetTable (dataSet, pixelDataElement, fragments) {\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter dataSet';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: missing required parameter pixelDataElement';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010\\'';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (fragments && fragments.length <= 0) {\n    throw 'dicomParser.createJPEGBasicOffsetTable: parameter \\'fragments\\' must not be zero length';\n  }\n\n  // Default values\n  fragments = fragments || pixelDataElement.fragments;\n\n  var basicOffsetTable = [];\n\n  var startFragmentIndex = 0;\n\n  while (true) {\n    // Add the offset for the start fragment\n    basicOffsetTable.push(pixelDataElement.fragments[startFragmentIndex].offset);\n    var endFragmentIndex = findLastImageFrameFragmentIndex(dataSet, pixelDataElement, startFragmentIndex);\n\n    if (endFragmentIndex === undefined || endFragmentIndex === pixelDataElement.fragments.length - 1) {\n      return basicOffsetTable;\n    }\n    startFragmentIndex = endFragmentIndex + 1;\n  }\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads a tag (group number and element number) from a byteStream\n * @param byteStream the byte stream to read from\n * @returns {string} the tag in format xggggeeee where gggg is the lowercase hex value of the group number\n * and eeee is the lower case hex value of the element number\n */\nexport default function readTag (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readTag: missing required parameter \\'byteStream\\'';\n  }\n\n  const groupNumber = byteStream.readUint16() * 256 * 256;\n  const elementNumber = byteStream.readUint16();\n  const tag = `x${(`00000000${(groupNumber + elementNumber).toString(16)}`).substr(-8)}`;\n\n  return tag;\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads an encapsulated pixel data element and adds an array of fragments to the element\n * containing the offset and length of each fragment and any offsets from the basic offset\n * table\n * @param byteStream\n * @param element\n */\nexport default function findEndOfEncapsulatedElement (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.findEndOfEncapsulatedElement: missing required parameter \\'element\\'';\n  }\n\n  element.encapsulatedPixelData = true;\n  element.basicOffsetTable = [];\n  element.fragments = [];\n\n  const basicOffsetTableItemTag = readTag(byteStream);\n\n  if (basicOffsetTableItemTag !== 'xfffee000') {\n    throw 'dicomParser.findEndOfEncapsulatedElement: basic offset table not found';\n  }\n\n  const basicOffsetTableItemlength = byteStream.readUint32();\n  const numFragments = basicOffsetTableItemlength / 4;\n\n  // Bad idea to not include the basic offset table, as it means writing the data out is inconsistent with reading it\n  // but leave this for now.  To fix later.\n  for (let i = 0; i < numFragments; i++) {\n    const offset = byteStream.readUint32();\n\n    element.basicOffsetTable.push(offset);\n  }\n\n  const baseOffset = byteStream.position;\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const tag = readTag(byteStream);\n    let length = byteStream.readUint32();\n\n    if (tag === 'xfffee0dd') {\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    } else if (tag === 'xfffee000') {\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n    } else {\n      if (warnings) {\n        warnings.push(`unexpected tag ${tag} while searching for end of pixel data element with undefined length`);\n      }\n\n      if (length > byteStream.byteArray.length - byteStream.position) {\n        // fix length\n        length = byteStream.byteArray.length - byteStream.position;\n      }\n\n      element.fragments.push({\n        offset: byteStream.position - baseOffset - 8,\n        position: byteStream.position,\n        length\n      });\n\n      byteStream.seek(length);\n      element.length = byteStream.position - element.dataOffset;\n\n      return;\n    }\n\n    byteStream.seek(length);\n  }\n\n  if (warnings) {\n    warnings.push(`pixel data element ${element.tag} missing sequence delimiter tag xfffee0dd`);\n  }\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic number for the Sequence Delimitation\n * Item item and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findAndSetUNElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.findAndSetUNElementLength: missing required parameter \\'byteStream\\'';\n  }\n\n  // group, element, length\n  const itemDelimitationItemLength = 8;\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe0dd) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32();\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end\n  // of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","/**\n * Internal helper functions common to parsing byte arrays of any type\n */\n\n/**\n * Reads a string of 8-bit characters from an array of bytes and advances\n * the position by length bytes.  A null terminator will end the string\n * but will not affect advancement of the position.  Trailing and leading\n * spaces are preserved (not trimmed)\n * @param byteArray the byteArray to read from\n * @param position the position in the byte array to read from\n * @param length the maximum number of bytes to parse\n * @returns {string} the parsed string\n * @throws error if buffer overread would occur\n * @access private\n */\nexport function readFixedString (byteArray, position, length) {\n  if (length < 0) {\n    throw 'dicomParser.readFixedString - length cannot be less than 0';\n  }\n\n  if (position + length > byteArray.length) {\n    throw 'dicomParser.readFixedString: attempt to read past end of buffer';\n  }\n\n  var result = '';\n  var byte;\n\n  for (var i = 0; i < length; i++) {\n    byte = byteArray[position + i];\n    if (byte === 0) {\n      position += length;\n\n      return result;\n    }\n    result += String.fromCharCode(byte);\n  }\n\n  return result;\n}\n","import { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * The DataSet class encapsulates a collection of DICOM Elements and provides various functions\n * to access the data in those elements\n *\n * Rules for handling padded spaces:\n * DS = Strip leading and trailing spaces\n * DT = Strip trailing spaces\n * IS = Strip leading and trailing spaces\n * PN = Strip trailing spaces\n * TM = Strip trailing spaces\n * AE = Strip leading and trailing spaces\n * CS = Strip leading and trailing spaces\n * SH = Strip leading and trailing spaces\n * LO = Strip leading and trailing spaces\n * LT = Strip trailing spaces\n * ST = Strip trailing spaces\n * UT = Strip trailing spaces\n *\n */\n\nfunction getByteArrayParser (element, defaultParser) {\n  return (element.parser !== undefined ? element.parser : defaultParser);\n}\n\n/**\n * Constructs a new DataSet given byteArray and collection of elements\n * @param byteArrayParser\n * @param byteArray\n * @param elements\n * @constructor\n */\nexport default class DataSet {\n  constructor (byteArrayParser, byteArray, elements) {\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.elements = elements;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  uint16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 16 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 16 or undefined if the attribute is not present or has data of length 0\n     */\n  int16 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt16(this.byteArray, element.dataOffset + (index * 2));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an unsigned int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} unsigned int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  uint32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readUint32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns an signed int 32 if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} signed int 32 or undefined if the attribute is not present or has data of length 0\n     */\n  int32 (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readInt32(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 32 bit floating point number (VR=FL) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or has data of length 0\n     */\n  float (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readFloat(this.byteArray, element.dataOffset + (index * 4));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Finds the element for tag and returns a 64 bit floating point number (VR=FD) if it exists and has data\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the value in a multivalued element.  Default is index 0 if not supplied\n     * @returns {*} float or undefined if the attribute is not present or doesn't has data of length 0\n     */\n  double (tag, index) {\n    var element = this.elements[tag];\n\n    index = (index !== undefined) ? index : 0;\n    if (element && element.length !== 0) {\n      return getByteArrayParser(element, this.byteArrayParser).readDouble(this.byteArray, element.dataOffset + (index * 8));\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns the number of string values for the element\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @returns {*} the number of string values or undefined if the attribute is not present or has zero length data\n     */\n  numStringValues (tag) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n      var numMatching = fixedString.match(/\\\\/g);\n\n      if (numMatching === null) {\n        return 1;\n      }\n\n      return numMatching.length + 1;\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string for the element.  If index is provided, the element is assumed to be\n     * multi-valued and will return the component specified by index.  Undefined is returned\n     * if there is no component with the specified index, the element does not exist or is zero length.\n     *\n     * Use this function for VR types of AE, CS, SH and LO\n     *\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the entire string\n     * @returns {*}\n     */\n  string (tag, index) {\n    var element = this.elements[tag];\n\n    if( element && element.Value ) return element.Value;\n    \n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n        // trim trailing spaces\n\n        return values[index].trim();\n      }\n      // trim trailing spaces\n      return fixedString.trim();\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Returns a string with the leading spaces preserved and trailing spaces removed.\n     *\n     * Use this function to access data for VRs of type UT, ST and LT\n     *\n     * @param tag\n     * @param index\n     * @returns {*}\n     */\n  text (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      var fixedString = readFixedString(this.byteArray, element.dataOffset, element.length);\n\n      if (index >= 0) {\n        var values = fixedString.split('\\\\');\n\n\n        return values[index].replace(/ +$/, '');\n      }\n\n      return fixedString.replace(/ +$/, '');\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to a float for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} a floating point number or undefined if not present or data not long enough\n     */\n  floatString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseFloat(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses a string to an integer for the specified index in a multi-valued element.  If index is not specified,\n     * the first value in a multi-valued VR will be parsed if present.\n     * @param tag The DICOM tag in the format xGGGGEEEE\n     * @param index the index of the desired value in a multi valued string or undefined for the first value\n     * @returns {*} an integer or undefined if not present or data not long enough\n     */\n  intString (tag, index) {\n    var element = this.elements[tag];\n\n    if (element && element.length > 0) {\n      index = (index !== undefined) ? index : 0;\n      var value = this.string(tag, index);\n\n      if (value !== undefined) {\n        return parseInt(value);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n     * Parses an element tag according to the 'AT' VR definition (VR=AT).\n     * @param {String} A DICOM tag with in the format xGGGGEEEE.\n     * @returns {String} A string representation of a data element tag or undefined if the field is not present or data is not long enough.\n     */\n  attributeTag (tag) {\n    const element = this.elements[tag];\n\n    if (element && element.length === 4) {\n      const parser = getByteArrayParser(element, this.byteArrayParser).readUint16;\n      const bytes = this.byteArray;\n      const offset = element.dataOffset;\n\n      return `x${(`00000000${(parser(bytes, offset) * 256 * 256 + parser(bytes, offset + 2)).toString(16)}`).substr(-8)}`;\n    }\n\n    return undefined;\n  }\n}\n","/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * reads from the byte stream until it finds the magic numbers for the item delimitation item\n * and then sets the length of the element\n * @param byteStream\n * @param element\n */\nexport default function findItemDelimitationItemAndSetElementLength (byteStream, element) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const itemDelimitationItemLength = 8; // group, element, length\n  const maxPosition = byteStream.byteArray.length - itemDelimitationItemLength;\n\n  while (byteStream.position <= maxPosition) {\n    const groupNumber = byteStream.readUint16();\n\n    if (groupNumber === 0xfffe) {\n      const elementNumber = byteStream.readUint16();\n\n      if (elementNumber === 0xe00d) {\n        // NOTE: It would be better to also check for the length to be 0 as part of the check above\n        // but we will just log a warning for now\n        const itemDelimiterLength = byteStream.readUint32(); // the length\n\n        if (itemDelimiterLength !== 0) {\n          byteStream.warnings(`encountered non zero length following item delimiter at position ${byteStream.position - 4} while reading element of undefined length with tag ${element.tag}`);\n        }\n\n        element.length = byteStream.position - element.dataOffset;\n\n        return;\n      }\n    }\n  }\n\n  // No item delimitation item - silently set the length to the end of the buffer and set the position past the end of the buffer\n  element.length = byteStream.byteArray.length - element.dataOffset;\n  byteStream.seek(byteStream.byteArray.length - byteStream.position);\n}\n","import findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\nimport { isPrivateTag } from './util/util.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst isSequence = (element, byteStream) => {\n  if (element.vr !== undefined) {\n    return (element.vr === 'SQ');\n  }\n\n  if ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    // Item start tag (fffe,e000) or sequence delimiter (i.e. end of sequence) tag (0fffe,e0dd)\n    // These are the tags that could potentially be found directly after a sequence start tag (the delimiter\n    // is found in the case of an empty sequence). This is not 100% safe because a non-sequence item\n    // could have data that has these bytes, but this is how to do it without a data dictionary.\n    return (nextTag === 'xfffee000') || (nextTag === 'xfffee0dd');\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence item tag or sequence delimiter tag in peeking to determine VR');\n\n  return false;\n};\n\nexport default function readDicomElementImplicit (byteStream, untilTag, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const tag = readTag(byteStream);\n\n  const element = {\n    tag,\n    vr: (vrCallback !== undefined ? vrCallback(tag) : undefined),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // always parse sequences with undefined lengths, since there's no other way to know how long they are.\n  if (isSequence(element, byteStream) && (!isPrivateTag(element.tag) || element.hadUndefinedLength)) {\n    // parse the sequence\n    readSequenceItemsImplicit(byteStream, element, vrCallback);\n\n    if (isPrivateTag(element.tag)) {\n      element.items = undefined;\n    }\n\n    return element;\n  }\n\n  // if element is not a sequence and has undefined length, we have to\n  // scan the data for a magic number to figure out when it ends.\n  if (element.hadUndefinedLength) {\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  // non sequence element with known length, skip over the data part\n  byteStream.seek(element.length);\n\n  return element;\n}\n","import readTag from './readTag.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\n/**\n * Reads the tag and length of a sequence item and returns them as an object with the following properties\n *  tag : string for the tag of this element in the format xggggeeee\n *  length: the number of bytes in this item or 4294967295 if undefined\n *  dataOffset: the offset into the byteStream of the data for this item\n * @param byteStream the byte\n * @returns {{tag: string, length: integer, dataOffset: integer}}\n */\nexport default function readSequenceItem (byteStream) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItem: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    length: byteStream.readUint32(),\n    dataOffset: byteStream.position\n  };\n\n  if (element.tag !== 'xfffee000') {\n    throw `dicomParser.readSequenceItem: item tag (FFFE,E000) not found at offset ${byteStream.position}`;\n  }\n\n  return element;\n}\n","import DataSet from './dataSet.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetImplicitUndefinedLength (byteStream, vrCallback) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementImplicit(byteStream, undefined, vrCallback);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  byteStream.warnings.push('eof encountered before finding sequence item delimiter in sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemImplicit (byteStream, vrCallback) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetImplicitUndefinedLength(byteStream, vrCallback);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetImplicit(item.dataSet, byteStream, byteStream.position + item.length, { vrCallback });\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthImplicit (byteStream, element, vrCallback) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n\n  byteStream.warnings.push('eof encountered before finding sequence delimiter in sequence of undefined length');\n  element.length = byteStream.byteArray.length - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthImplicit (byteStream, element, vrCallback) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemImplicit(byteStream, vrCallback);\n\n    element.items.push(item);\n  }\n}\n\n/**\n * Reads sequence items for an element in an implicit little endian byte stream\n * @param byteStream the implicit little endian byte stream\n * @param element the element to read the sequence items for\n * @param vrCallback an optional method that returns a VR string given a tag\n */\nexport default function readSequenceItemsImplicit (byteStream, element, vrCallback) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsImplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthImplicit(byteStream, element, vrCallback);\n  } else {\n    readSQElementKnownLengthImplicit(byteStream, element, vrCallback);\n  }\n}\n","import DataSet from './dataSet.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n/**\n * Internal helper functions for parsing DICOM elements\n */\n\nfunction readDicomDataSetExplicitUndefinedLength (byteStream, warnings) {\n  const elements = {};\n\n  while (byteStream.position < byteStream.byteArray.length) {\n    const element = readDicomElementExplicit(byteStream, warnings);\n\n    elements[element.tag] = element;\n\n    // we hit an item delimiter tag, return the current offset to mark\n    // the end of this sequence item\n    if (element.tag === 'xfffee00d') {\n      return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n    }\n  }\n\n  // eof encountered - log a warning and return what we have for the element\n  warnings.push('eof encountered before finding item delimiter tag while reading sequence item of undefined length');\n\n  return new DataSet(byteStream.byteArrayParser, byteStream.byteArray, elements);\n}\n\nfunction readSequenceItemExplicit (byteStream, warnings) {\n  const item = readSequenceItem(byteStream);\n\n  if (item.length === 4294967295) {\n    item.hadUndefinedLength = true;\n    item.dataSet = readDicomDataSetExplicitUndefinedLength(byteStream, warnings);\n    item.length = byteStream.position - item.dataOffset;\n  } else {\n    item.dataSet = new DataSet(byteStream.byteArrayParser, byteStream.byteArray, {});\n    parseDicomDataSet.parseDicomDataSetExplicit(item.dataSet, byteStream, byteStream.position + item.length);\n  }\n\n  return item;\n}\n\nfunction readSQElementUndefinedLengthExplicit (byteStream, element, warnings) {\n  while ((byteStream.position + 4) <= byteStream.byteArray.length) {\n    // end reading this sequence if the next tag is the sequence delimitation item\n    const nextTag = readTag(byteStream);\n\n    byteStream.seek(-4);\n    if (nextTag === 'xfffee0dd') {\n      // set the correct length\n      element.length = byteStream.position - element.dataOffset;\n      byteStream.seek(8);\n\n      return element;\n    }\n\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n\n  warnings.push('eof encountered before finding sequence delimitation tag while reading sequence of undefined length');\n  element.length = byteStream.position - element.dataOffset;\n}\n\nfunction readSQElementKnownLengthExplicit (byteStream, element, warnings) {\n  const maxPosition = element.dataOffset + element.length;\n\n  while (byteStream.position < maxPosition) {\n    const item = readSequenceItemExplicit(byteStream, warnings);\n\n    element.items.push(item);\n  }\n}\n\nexport default function readSequenceItemsExplicit (byteStream, element, warnings) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (element === undefined) {\n    throw 'dicomParser.readSequenceItemsExplicit: missing required parameter \\'element\\'';\n  }\n\n  element.items = [];\n\n  if (element.length === 4294967295) {\n    readSQElementUndefinedLengthExplicit(byteStream, element, warnings);\n  } else {\n    readSQElementKnownLengthExplicit(byteStream, element, warnings);\n  }\n}\n","import findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport readSequenceItemsImplicit  from './readSequenceElementImplicit.js';\nimport readTag from './readTag.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\n\n/**\n * Internal helper functions for for parsing DICOM elements\n */\n\nconst getDataLengthSizeInBytesForVR = (vr) => {\n  if (vr === 'OB' ||\n      vr === 'OD' ||\n      vr === 'OL' ||\n      vr === 'OW' ||\n      vr === 'SQ' ||\n      vr === 'OF' ||\n      vr === 'UC' ||\n      vr === 'UR' ||\n      vr === 'UT' ||\n      vr === 'UN') {\n    return 4;\n  }\n\n  return 2;\n};\n\nexport default function readDicomElementExplicit (byteStream, warnings, untilTag) {\n  if (byteStream === undefined) {\n    throw 'dicomParser.readDicomElementExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  const element = {\n    tag: readTag(byteStream),\n    vr: byteStream.readFixedString(2)\n    // length set below based on VR\n    // dataOffset set below based on VR and size of length\n  };\n\n  const dataLengthSizeBytes = getDataLengthSizeInBytesForVR(element.vr);\n\n  if (dataLengthSizeBytes === 2) {\n    element.length = byteStream.readUint16();\n    element.dataOffset = byteStream.position;\n  } else {\n    byteStream.seek(2);\n    element.length = byteStream.readUint32();\n    element.dataOffset = byteStream.position;\n  }\n\n  if (element.length === 4294967295) {\n    element.hadUndefinedLength = true;\n  }\n\n  if (element.tag === untilTag) {\n    return element;\n  }\n\n  // if VR is SQ, parse the sequence items\n  if (element.vr === 'SQ') {\n    readSequenceItemsExplicit(byteStream, element, warnings);\n\n    return element;\n  }\n\n  if (element.length === 4294967295) {\n    if (element.tag === 'x7fe00010') {\n      findEndOfEncapsulatedElement(byteStream, element, warnings);\n\n      return element;\n    } else if (element.vr === 'UN') {\n      readSequenceItemsImplicit(byteStream, element);\n\n      return element;\n    }\n\n    findItemDelimitationItemAndSetElementLength(byteStream, element);\n\n    return element;\n  }\n\n  byteStream.seek(element.length);\n\n  return element;\n}\n","import readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\n\n/**\n * Internal helper functions for parsing implicit and explicit DICOM data sets\n */\n\n/**\n * reads an explicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetExplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? byteStream.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetExplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetExplicit: invalid value for parameter \\'maxP osition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementExplicit(byteStream, dataSet.warnings, options.untilTag);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n\n  if (byteStream.position > maxPosition) {\n    throw 'dicomParser:parseDicomDataSetExplicit: buffer overrun';\n  }\n}\n\n/**\n * reads an implicit data set\n * @param byteStream the byte stream to read from\n * @param maxPosition the maximum position to read up to (optional - only needed when reading sequence items)\n */\nexport function parseDicomDataSetImplicit (dataSet, byteStream, maxPosition, options = {}) {\n  maxPosition = (maxPosition === undefined) ? dataSet.byteArray.length : maxPosition;\n\n  if (byteStream === undefined) {\n    throw 'dicomParser.parseDicomDataSetImplicit: missing required parameter \\'byteStream\\'';\n  }\n\n  if (maxPosition < byteStream.position || maxPosition > byteStream.byteArray.length) {\n    throw 'dicomParser.parseDicomDataSetImplicit: invalid value for parameter \\'maxPosition\\'';\n  }\n\n  const elements = dataSet.elements;\n\n  while (byteStream.position < maxPosition) {\n    const element = readDicomElementImplicit(byteStream, options.untilTag, options.vrCallback);\n\n    elements[element.tag] = element;\n    if (element.tag === options.untilTag) {\n      return;\n    }\n  }\n}\n","/**\n * Creates a new byteArray of the same type (Uint8Array or Buffer) of the specified length.\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param length number of bytes of the Byte Array\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function alloc (byteArray, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return Buffer.alloc(length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(length);\n  }\n  throw 'dicomParser.alloc: unknown type for byteArray';\n}\n","export default '1.8.12';\n","/**\n * Internal helper functions for parsing different types from a big-endian byte array\n */\nexport default {\n\n  /**\n     *\n     * Parses an unsigned int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] << 8) + byteArray[position + 1];\n  },\n\n  /**\n     *\n     * Parses a signed int 16 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 16\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n    var int16 = (byteArray[position] << 8) + byteArray[position + 1];\n    // fix sign\n\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n  /**\n     * Parses an unsigned int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed unsigned int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    var uint32 = (256 * (256 * (256 * byteArray[position] +\n                                          byteArray[position + 1]) +\n                                          byteArray[position + 2]) +\n                                          byteArray[position + 3]);\n\n    return uint32;\n  },\n\n  /**\n     * Parses a signed int 32 from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed signed int 32\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    var int32 = ((byteArray[position] << 24) +\n                     (byteArray[position + 1] << 16) +\n                     (byteArray[position + 2] << 8) +\n                      byteArray[position + 3]);\n\n    return int32;\n  },\n\n  /**\n     * Parses 32-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 32-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[3] = byteArray[position];\n    byteArrayForParsingFloat[2] = byteArray[position + 1];\n    byteArrayForParsingFloat[1] = byteArray[position + 2];\n    byteArrayForParsingFloat[0] = byteArray[position + 3];\n    var floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  },\n\n  /**\n     * Parses 64-bit float from a big-endian byte array\n     *\n     * @param byteArray the byte array to read from\n     * @param position the position in the byte array to read from\n     * @returns {*} the parsed 64-bit float\n     * @throws error if buffer overread would occur\n     * @access private\n     */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'bigEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'bigEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    var byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[7] = byteArray[position];\n    byteArrayForParsingFloat[6] = byteArray[position + 1];\n    byteArrayForParsingFloat[5] = byteArray[position + 2];\n    byteArrayForParsingFloat[4] = byteArray[position + 3];\n    byteArrayForParsingFloat[3] = byteArray[position + 4];\n    byteArrayForParsingFloat[2] = byteArray[position + 5];\n    byteArrayForParsingFloat[1] = byteArray[position + 6];\n    byteArrayForParsingFloat[0] = byteArray[position + 7];\n    var floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n\n    return floatArray[0];\n  }\n};\n","/**\n *\n * Internal helper function to create a shared copy of a byteArray\n *\n */\n\n/**\n * Creates a view of the underlying byteArray.  The view is of the same type as the byteArray (e.g.\n * Uint8Array or Buffer) and shares the same underlying memory (changing one changes the other)\n * @param byteArray the underlying byteArray (either Uint8Array or Buffer)\n * @param byteOffset offset into the underlying byteArray to create the view of\n * @param length number of bytes in the view\n * @returns {object} Uint8Array or Buffer depending on the type of byteArray\n */\nexport default function sharedCopy (byteArray, byteOffset, length) {\n  if (typeof Buffer !== 'undefined' && byteArray instanceof Buffer) {\n    return byteArray.slice(byteOffset, byteOffset + length);\n  } else if (byteArray instanceof Uint8Array) {\n    return new Uint8Array(byteArray.buffer, byteArray.byteOffset + byteOffset, length);\n  }\n  throw 'dicomParser.from: unknown type for byteArray';\n}\n","import sharedCopy from './sharedCopy.js';\nimport { readFixedString } from './byteArrayParser.js';\n\n/**\n *\n * Internal helper class to assist with parsing. Supports reading from a byte\n * stream contained in a Uint8Array.  Example usage:\n *\n *  var byteArray = new Uint8Array(32);\n *  var byteStream = new dicomParser.ByteStream(dicomParser.littleEndianByteArrayParser, byteArray);\n *\n * */\n\n/**\n * Constructor for ByteStream objects.\n * @param byteArrayParser a parser for parsing the byte array\n * @param byteArray a Uint8Array containing the byte stream\n * @param position (optional) the position to start reading from.  0 if not specified\n * @constructor\n * @throws will throw an error if the byteArrayParser parameter is not present\n * @throws will throw an error if the byteArray parameter is not present or invalid\n * @throws will throw an error if the position parameter is not inside the byte array\n */\nexport default class ByteStream {\n  constructor (byteArrayParser, byteArray, position) {\n    if (byteArrayParser === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArrayParser\\'';\n    }\n    if (byteArray === undefined) {\n      throw 'dicomParser.ByteStream: missing required parameter \\'byteArray\\'';\n    }\n    if ((byteArray instanceof Uint8Array) === false &&\n          ((typeof Buffer === 'undefined') ||\n          (byteArray instanceof Buffer) === false)) {\n      throw 'dicomParser.ByteStream: parameter byteArray is not of type Uint8Array or Buffer';\n    }\n    if (position < 0) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be less than 0';\n    }\n    if (position >= byteArray.length) {\n      throw 'dicomParser.ByteStream: parameter \\'position\\' cannot be greater than or equal to \\'byteArray\\' length';\n    }\n    this.byteArrayParser = byteArrayParser;\n    this.byteArray = byteArray;\n    this.position = position ? position : 0;\n    this.warnings = []; // array of string warnings encountered while parsing\n  }\n\n  /**\n     * Safely seeks through the byte stream.  Will throw an exception if an attempt\n     * is made to seek outside of the byte array.\n     * @param offset the number of bytes to add to the position\n     * @throws error if seek would cause position to be outside of the byteArray\n     */\n  seek (offset) {\n    if (this.position + offset < 0) {\n      throw 'dicomParser.ByteStream.prototype.seek: cannot seek to position < 0';\n    }\n    this.position += offset;\n  }\n\n  /**\n     * Returns a new ByteStream object from the current position and of the requested number of bytes\n     * @param numBytes the length of the byte array for the ByteStream to contain\n     * @returns {dicomParser.ByteStream}\n     * @throws error if buffer overread would occur\n     */\n  readByteStream (numBytes) {\n    if (this.position + numBytes > this.byteArray.length) {\n      throw 'dicomParser.ByteStream.prototype.readByteStream: readByteStream - buffer overread';\n    }\n    var byteArrayView = sharedCopy(this.byteArray, this.position, numBytes);\n\n    this.position += numBytes;\n\n    return new ByteStream(this.byteArrayParser, byteArrayView);\n  }\n\n  getSize() {\n    return this.byteArray.length;\n  }\n\n  /**\n     *\n     * Parses an unsigned int 16 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parsed unsigned int 16\n     * @throws error if buffer overread would occur\n     */\n  readUint16 () {\n    var result = this.byteArrayParser.readUint16(this.byteArray, this.position);\n\n    this.position += 2;\n\n    return result;\n  }\n\n  /**\n     * Parses an unsigned int 32 from a byte array and advances\n     * the position by 2 bytes\n     *\n     * @returns {*} the parse unsigned int 32\n     * @throws error if buffer overread would occur\n     */\n  readUint32 () {\n    var result = this.byteArrayParser.readUint32(this.byteArray, this.position);\n\n    this.position += 4;\n\n    return result;\n  }\n\n  /**\n     * Reads a string of 8-bit characters from an array of bytes and advances\n     * the position by length bytes.  A null terminator will end the string\n     * but will not effect advancement of the position.\n     * @param length the maximum number of bytes to parse\n     * @returns {string} the parsed string\n     * @throws error if buffer overread would occur\n     */\n  readFixedString (length) {\n    var result = readFixedString(this.byteArray, this.position, length);\n\n    this.position += length;\n\n    return result;\n  }\n}\n","/**\n * Internal helper functions for parsing different types from a little-endian byte array\n */\n\nexport default {\n\n  /**\n   *\n   * Parses an unsigned int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint16: position cannot be less than 0';\n    }\n\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint16: attempt to read past end of buffer';\n    }\n\n    return byteArray[position] + (byteArray[position + 1] * 256);\n  },\n\n  /**\n   *\n   * Parses a signed int 16 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed signed int 16\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt16 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt16: position cannot be less than 0';\n    }\n    if (position + 2 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt16: attempt to read past end of buffer';\n    }\n\n    let int16 = byteArray[position] + (byteArray[position + 1] << 8);\n\n    // fix sign\n    if (int16 & 0x8000) {\n      int16 = int16 - 0xFFFF - 1;\n    }\n\n    return int16;\n  },\n\n\n  /**\n   * Parses an unsigned int 32 from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readUint32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readUint32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readUint32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] * 256) +\n           (byteArray[position + 2] * 256 * 256) +\n           (byteArray[position + 3] * 256 * 256 * 256));\n  },\n\n  /**\n * Parses a signed int 32 from a little-endian byte array\n *\n * @param byteArray the byte array to read from\n * @param position the position in the byte array to read from\n   * @returns {*} the parsed unsigned int 32\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readInt32 (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readInt32: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readInt32: attempt to read past end of buffer';\n    }\n\n    return (byteArray[position] +\n           (byteArray[position + 1] << 8) +\n           (byteArray[position + 2] << 16) +\n           (byteArray[position + 3] << 24));\n  },\n\n  /**\n   * Parses 32-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 32-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readFloat (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readFloat: position cannot be less than 0';\n    }\n\n    if (position + 4 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readFloat: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(4);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n\n    const floatArray = new Float32Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  },\n\n  /**\n   * Parses 64-bit float from a little-endian byte array\n   *\n   * @param byteArray the byte array to read from\n   * @param position the position in the byte array to read from\n   * @returns {*} the parsed 64-bit float\n   * @throws error if buffer overread would occur\n   * @access private\n   */\n  readDouble (byteArray, position) {\n    if (position < 0) {\n      throw 'littleEndianByteArrayParser.readDouble: position cannot be less than 0';\n    }\n\n    if (position + 8 > byteArray.length) {\n      throw 'littleEndianByteArrayParser.readDouble: attempt to read past end of buffer';\n    }\n\n    // I am sure there is a better way than this but this should be safe\n    const byteArrayForParsingFloat = new Uint8Array(8);\n\n    byteArrayForParsingFloat[0] = byteArray[position];\n    byteArrayForParsingFloat[1] = byteArray[position + 1];\n    byteArrayForParsingFloat[2] = byteArray[position + 2];\n    byteArrayForParsingFloat[3] = byteArray[position + 3];\n    byteArrayForParsingFloat[4] = byteArray[position + 4];\n    byteArrayForParsingFloat[5] = byteArray[position + 5];\n    byteArrayForParsingFloat[6] = byteArray[position + 6];\n    byteArrayForParsingFloat[7] = byteArray[position + 7];\n\n    const floatArray = new Float64Array(byteArrayForParsingFloat.buffer);\n\n    return floatArray[0];\n  }\n};\n","import ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.  If the options\n * argument is supplied and it contains the untilTag property, parsing will stop once that\n * tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options Optional options values\n *    TransferSyntaxUID: String to specify a default raw transfer syntax UID.\n *        Use the LEI transfer syntax for raw files, or the provided one for SCP transfers.\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a property dataSet with the\n *         elements successfully parsed before the error.\n */\n\nexport default function readPart10Header (byteArray, options = {}) {\n  if (byteArray === undefined) {\n    throw 'dicomParser.readPart10Header: missing required parameter \\'byteArray\\'';\n  }\n\n  const { TransferSyntaxUID } = options;\n  const littleEndianByteStream = new ByteStream(littleEndianByteArrayParser, byteArray);\n\n  function readPrefix() {\n    if (littleEndianByteStream.getSize() <= 132 && TransferSyntaxUID) {\n      return false;\n    }\n    littleEndianByteStream.seek(128);\n    const prefix = littleEndianByteStream.readFixedString(4);\n\n    if (prefix !== 'DICM') {\n      const { TransferSyntaxUID } = options || {};\n      if (!TransferSyntaxUID) {\n        throw 'dicomParser.readPart10Header: DICM prefix not found at location 132 - this is not a valid DICOM P10 file.';\n      }\n      littleEndianByteStream.seek(0);\n      return false;\n    }\n    return true;\n  }\n\n  // main function here\n  function readTheHeader() {\n    // Per the DICOM standard, the header is always encoded in Explicit VR Little Endian (see PS3.10, section 7.1)\n    // so use littleEndianByteStream throughout this method regardless of the transfer syntax\n    const isPart10 = readPrefix();\n\n    const warnings = [];\n    const elements = {};\n\n    if (!isPart10) {\n      littleEndianByteStream.position = 0;\n      const metaHeaderDataSet = {\n        elements: { x00020010: { tag: 'x00020010', vr: 'UI', Value: TransferSyntaxUID } },\n        warnings,\n      };\n      // console.log('Returning metaHeaderDataSet', metaHeaderDataSet);\n      return metaHeaderDataSet;\n    }\n\n    while (littleEndianByteStream.position < littleEndianByteStream.byteArray.length) {\n      const position = littleEndianByteStream.position;\n      const element = readDicomElementExplicit(littleEndianByteStream, warnings);\n\n      if (element.tag > 'x0002ffff') {\n        littleEndianByteStream.position = position;\n        break;\n      }\n      // Cache the littleEndianByteArrayParser for meta header elements, since the rest of the data set may be big endian\n      // and this parser will be needed later if the meta header values are to be read.\n      element.parser = littleEndianByteArrayParser;\n      elements[element.tag] = element;\n    }\n\n    const metaHeaderDataSet = new DataSet(littleEndianByteStream.byteArrayParser, littleEndianByteStream.byteArray, elements);\n\n    metaHeaderDataSet.warnings = littleEndianByteStream.warnings;\n    metaHeaderDataSet.position = littleEndianByteStream.position;\n\n    return metaHeaderDataSet;\n  }\n\n  // This is where we actually start parsing\n  return readTheHeader();\n}\n","import alloc from './alloc.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport DataSet from './dataSet.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport readPart10Header from './readPart10Header.js';\nimport sharedCopy from './sharedCopy.js';\nimport * as byteArrayParser from './byteArrayParser.js';\nimport * as parseDicomDataSet from './parseDicomDataSet.js';\n\n// LEE (Little Endian Explicit) is the transfer syntax used in dimse operations when there is a split\n// between the header and data.\nconst LEE = '1.2.840.10008.1.2.1';\n\n// LEI (Little Endian Implicit) is the transfer syntax in raw files\nconst LEI = '1.2.840.10008.1.2';\n\n// BEI (Big Endian Implicit) is deprecated, but needs special parse handling\nconst BEI = '1.2.840.10008.1.2.2';\n\n/**\n * Parses a DICOM P10 byte array and returns a DataSet object with the parsed elements.\n * If the options argument is supplied and it contains the untilTag property, parsing\n * will stop once that tag is encoutered.  This can be used to parse partial byte streams.\n *\n * @param byteArray the byte array\n * @param options object to control parsing behavior (optional)\n * @returns {DataSet}\n * @throws error if an error occurs while parsing.  The exception object will contain a\n *         property dataSet with the elements successfully parsed before the error.\n */\n\nexport default function parseDicom(byteArray, options = {}) {\n  if (byteArray === undefined) {\n    throw new Error('dicomParser.parseDicom: missing required parameter \\'byteArray\\'');\n  }\n\n  \n  const readTransferSyntax = (metaHeaderDataSet) => {\n    if (metaHeaderDataSet.elements.x00020010 === undefined) {\n      throw new Error('dicomParser.parseDicom: missing required meta header attribute 0002,0010');\n    }\n\n    const transferSyntaxElement = metaHeaderDataSet.elements.x00020010;\n    return transferSyntaxElement && transferSyntaxElement.Value ||\n      byteArrayParser.readFixedString(byteArray, transferSyntaxElement.dataOffset, transferSyntaxElement.length);\n  }\n\n  function isExplicit(transferSyntax) {\n    // implicit little endian\n    if (transferSyntax === '1.2.840.10008.1.2') {\n      return false;\n    }\n\n    // all other transfer syntaxes should be explicit\n    return true;\n  }\n\n  function getDataSetByteStream(transferSyntax, position) {\n    // Detect whether we are inside a browser or Node.js\n    const isNode = (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');\n\n    if (transferSyntax === '1.2.840.10008.1.2.1.99') {\n      // if an infalter callback is registered, use it\n      if (options && options.inflater) {\n        const fullByteArrayCallback = options.inflater(byteArray, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayCallback, 0);\n      }\n      // if running on node, use the zlib library to inflate\n      // http://stackoverflow.com/questions/4224606/how-to-check-whether-a-script-is-running-under-node-js\n      else if (isNode === true) {\n        // inflate it\n        const zlib = require('zlib');\n        const deflatedBuffer = sharedCopy(byteArray, position, byteArray.length - position);\n        const inflatedBuffer = zlib.inflateRawSync(deflatedBuffer);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArrayBuffer = alloc(byteArray, inflatedBuffer.length + position);\n\n        byteArray.copy(fullByteArrayBuffer, 0, 0, position);\n        inflatedBuffer.copy(fullByteArrayBuffer, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArrayBuffer, 0);\n      }\n      // if pako is defined - use it.  This is the web browser path\n      // https://github.com/nodeca/pako\n      else if (typeof pako !== 'undefined') {\n        // inflate it\n        const deflated = byteArray.slice(position);\n        const inflated = pako.inflateRaw(deflated);\n\n        // create a single byte array with the full header bytes and the inflated bytes\n        const fullByteArray = alloc(byteArray, inflated.length + position);\n\n        fullByteArray.set(byteArray.slice(0, position), 0);\n        fullByteArray.set(inflated, position);\n\n        return new ByteStream(littleEndianByteArrayParser, fullByteArray, 0);\n      }\n\n      // throw exception since no inflater is available\n      throw 'dicomParser.parseDicom: no inflater available to handle deflate transfer syntax';\n    }\n\n    // explicit big endian\n    if (transferSyntax === BEI) {\n      return new ByteStream(bigEndianByteArrayParser, byteArray, position);\n    }\n\n    // all other transfer syntaxes are little endian; only the pixel encoding differs\n    // make a new stream so the metaheader warnings don't come along for the ride\n    return new ByteStream(littleEndianByteArrayParser, byteArray, position);\n  }\n\n  function mergeDataSets(metaHeaderDataSet, instanceDataSet) {\n    for (const propertyName in metaHeaderDataSet.elements) {\n      if (metaHeaderDataSet.elements.hasOwnProperty(propertyName)) {\n        instanceDataSet.elements[propertyName] = metaHeaderDataSet.elements[propertyName];\n      }\n    }\n\n    if (metaHeaderDataSet.warnings !== undefined) {\n      instanceDataSet.warnings = metaHeaderDataSet.warnings.concat(instanceDataSet.warnings);\n    }\n\n    return instanceDataSet;\n  }\n\n  function readDataSet(metaHeaderDataSet) {\n    const transferSyntax = readTransferSyntax(metaHeaderDataSet);\n    const explicit = isExplicit(transferSyntax);\n    const dataSetByteStream = getDataSetByteStream(transferSyntax, metaHeaderDataSet.position);\n\n    const elements = {};\n    const dataSet = new DataSet(dataSetByteStream.byteArrayParser, dataSetByteStream.byteArray, elements);\n\n    dataSet.warnings = dataSetByteStream.warnings;\n\n    try {\n      if (explicit) {\n        parseDicomDataSet.parseDicomDataSetExplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      } else {\n        parseDicomDataSet.parseDicomDataSetImplicit(dataSet, dataSetByteStream, dataSetByteStream.byteArray.length, options);\n      }\n    } catch (e) {\n      const ex = {\n        exception: e,\n        dataSet\n      };\n\n      throw ex;\n    }\n\n    return dataSet;\n  }\n\n  // main function here\n  function parseTheByteStream() {\n    const metaHeaderDataSet = readPart10Header(byteArray, options);\n    const dataSet = readDataSet(metaHeaderDataSet);\n\n    return mergeDataSets(metaHeaderDataSet, dataSet);\n  }\n\n  // This is where we actually start parsing\n  return parseTheByteStream();\n}\n\nexport { LEI, LEE, BEI };","import alloc from './alloc.js';\nimport ByteStream from './byteStream.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport sharedCopy from './sharedCopy.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst calculateBufferSize = (fragments, startFragment, numFragments) => {\n  let bufferSize = 0;\n\n  for (let i = startFragment; i < startFragment + numFragments; i++) {\n    bufferSize += fragments[i].length;\n  }\n\n  return bufferSize;\n};\n\n/**\n * Returns the encapsulated pixel data from the specified fragments.  Use this function when you know\n * the fragments you want to extract data from.  See\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the fragment data from\n * @param startFragmentIndex - zero based index of the first fragment to extract from\n * @param [numFragments] - the number of fragments to extract from, default is 1\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} byte array with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelDataFromFragments (dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments) {\n  // default values\n  numFragments = numFragments || 1;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // check parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'startFragmentIndex\\'';\n  }\n  if (numFragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: missing required parameter \\'numFragments\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments.length <= 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (startFragmentIndex < 0) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be >= 0';\n  }\n  if (startFragmentIndex >= pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragmentIndex\\' must be < number of fragments';\n  }\n  if (numFragments < 1) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'numFragments\\' must be > 0';\n  }\n  if (startFragmentIndex + numFragments > pixelDataElement.fragments.length) {\n    throw 'dicomParser.readEncapsulatedPixelDataFromFragments: parameter \\'startFragment\\' + \\'numFragments\\' < number of fragments';\n  }\n\n  // create byte stream on the data for this pixel data element\n  const byteStream = new ByteStream(dataSet.byteArrayParser, dataSet.byteArray, pixelDataElement.dataOffset);\n\n  // seek past the basic offset table (no need to parse it again since we already have)\n  const basicOffsetTable = readSequenceItem(byteStream);\n\n  if (basicOffsetTable.tag !== 'xfffee000') {\n    throw 'dicomParser.readEncapsulatedPixelData: missing basic offset table xfffee000';\n  }\n\n  byteStream.seek(basicOffsetTable.length);\n\n  const fragmentZeroPosition = byteStream.position;\n\n  // tag + length\n  const fragmentHeaderSize = 8;\n\n  // if there is only one fragment, return a view on this array to avoid copying\n  if (numFragments === 1) {\n    return sharedCopy(byteStream.byteArray, fragmentZeroPosition + fragments[startFragmentIndex].offset + fragmentHeaderSize, fragments[startFragmentIndex].length);\n  }\n\n  // more than one fragment, combine all of the fragments into one buffer\n  const bufferSize = calculateBufferSize(fragments, startFragmentIndex, numFragments);\n  const pixelData = alloc(byteStream.byteArray, bufferSize);\n  let pixelDataIndex = 0;\n\n  for (let i = startFragmentIndex; i < startFragmentIndex + numFragments; i++) {\n    let fragmentOffset = fragmentZeroPosition + fragments[i].offset + fragmentHeaderSize;\n\n    for (let j = 0; j < fragments[i].length; j++) {\n      pixelData[pixelDataIndex++] = byteStream.byteArray[fragmentOffset++];\n    }\n  }\n\n  return pixelData;\n}\n","import readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nconst findFragmentIndexWithOffset = (fragments, offset) => {\n  for (let i = 0; i < fragments.length; i++) {\n    if (fragments[i].offset === offset) {\n      return i;\n    }\n  }\n};\n\nconst calculateNumberOfFragmentsForFrame = (frameIndex, basicOffsetTable, fragments, startFragmentIndex) => {\n  // special case for last frame\n  if (frameIndex === basicOffsetTable.length - 1) {\n    return fragments.length - startFragmentIndex;\n  }\n\n  // iterate through each fragment looking for the one matching the offset for the next frame\n  const nextFrameOffset = basicOffsetTable[frameIndex + 1];\n\n  for (let i = startFragmentIndex + 1; i < fragments.length; i++) {\n    if (fragments[i].offset === nextFrameOffset) {\n      return i - startFragmentIndex;\n    }\n  }\n\n  throw 'dicomParser.calculateNumberOfFragmentsForFrame: could not find fragment with offset matching basic offset table';\n};\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element that has a non\n * empty basic offset table.  Note that this function will fail if the basic offset table is empty - in that\n * case you need to determine which fragments map to which frames and read them using\n * readEncapsulatedPixelDataFromFragments().  Also see the function createJEPGBasicOffsetTable() to see\n * how a basic offset table can be created for JPEG images\n *\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frameIndex - the zero based frame index\n * @param [basicOffsetTable] - optional array of starting offsets for frames\n * @param [fragments] - optional array of objects describing each fragment (offset, position, length)\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedImageFrame (dataSet, pixelDataElement, frameIndex, basicOffsetTable, fragments) {\n  // default parameters\n  basicOffsetTable = basicOffsetTable || pixelDataElement.basicOffsetTable;\n  fragments = fragments || pixelDataElement.fragments;\n\n  // Validate parameters\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'pixelDataElement\\'';\n  }\n  if (frameIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: missing required parameter \\'frameIndex\\'';\n  }\n  if (basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' does not have basicOffsetTable';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have undefined length';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'pixelDataElement\\' refers to pixel data element that does not have fragments';\n  }\n  if (basicOffsetTable.length === 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: basicOffsetTable has zero entries';\n  }\n  if (frameIndex < 0) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be >= 0';\n  }\n  if (frameIndex >= basicOffsetTable.length) {\n    throw 'dicomParser.readEncapsulatedImageFrame: parameter \\'frameIndex\\' must be < basicOffsetTable.length';\n  }\n\n  // find starting fragment based on the offset for the frame in the basic offset table\n  const offset = basicOffsetTable[frameIndex];\n  const startFragmentIndex = findFragmentIndexWithOffset(fragments, offset);\n\n  if (startFragmentIndex === undefined) {\n    throw 'dicomParser.readEncapsulatedImageFrame: unable to find fragment that matches basic offset table entry';\n  }\n\n  // calculate the number of fragments for this frame\n  const numFragments = calculateNumberOfFragmentsForFrame(frameIndex, basicOffsetTable, fragments, startFragmentIndex);\n\n  // now extract the frame from the fragments\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, startFragmentIndex, numFragments, fragments);\n}\n","import readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\n\n/**\n * Functionality for extracting encapsulated pixel data\n */\n\nlet deprecatedNoticeLogged = false;\n\n/**\n * Returns the pixel data for the specified frame in an encapsulated pixel data element.  If no basic offset\n * table is present, it assumes that all fragments are for one frame.  Note that this assumption/logic is not\n * valid for multi-frame instances so this function has been deprecated and will eventually be removed.  Code\n * should be updated to use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n *\n * @deprecated since version 1.6 - use readEncapsulatedPixelDataFromFragments() or readEncapsulatedImageFrame()\n * @param dataSet - the dataSet containing the encapsulated pixel data\n * @param pixelDataElement - the pixel data element (x7fe00010) to extract the frame from\n * @param frame - the zero based frame index\n * @returns {object} with the encapsulated pixel data\n */\nexport default function readEncapsulatedPixelData (dataSet, pixelDataElement, frame) {\n  if (!deprecatedNoticeLogged) {\n    deprecatedNoticeLogged = true;\n\n    if (console && console.log) {\n      console.log('WARNING: dicomParser.readEncapsulatedPixelData() has been deprecated');\n    }\n  }\n\n  if (dataSet === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'dataSet\\'';\n  }\n  if (pixelDataElement === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'element\\'';\n  }\n  if (frame === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: missing required parameter \\'frame\\'';\n  }\n  if (pixelDataElement.tag !== 'x7fe00010') {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to non pixel data tag (expected tag = x7fe00010)';\n  }\n  if (pixelDataElement.encapsulatedPixelData !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.hadUndefinedLength !== true) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.basicOffsetTable === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (pixelDataElement.fragments === undefined) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'element\\' refers to pixel data element that does not have encapsulated pixel data';\n  }\n  if (frame < 0) {\n    throw 'dicomParser.readEncapsulatedPixelData: parameter \\'frame\\' must be >= 0';\n  }\n\n  // If the basic offset table is not empty, we can extract the frame\n  if (pixelDataElement.basicOffsetTable.length !== 0) {\n    return readEncapsulatedImageFrame(dataSet, pixelDataElement, frame);\n  }\n\n  // No basic offset table, assume all fragments are for one frame - NOTE that this is NOT a valid\n  // assumption but is the original behavior so we are keeping it for now\n  return readEncapsulatedPixelDataFromFragments(dataSet, pixelDataElement, 0, pixelDataElement.fragments.length);\n}\n","import {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable\n} from './util/index.js';\n\nimport { parseDicomDataSetExplicit, parseDicomDataSetImplicit } from './parseDicomDataSet.js';\nimport { readFixedString } from './byteArrayParser.js';\n\nimport alloc from './alloc.js';\nimport version from './version.js';\nimport bigEndianByteArrayParser from './bigEndianByteArrayParser.js';\nimport ByteStream from './byteStream.js';\nimport sharedCopy from './sharedCopy.js';\nimport DataSet from './dataSet.js';\nimport findAndSetUNElementLength from './findAndSetUNElementLength.js';\nimport findEndOfEncapsulatedElement from './findEndOfEncapsulatedPixelData.js';\nimport findItemDelimitationItemAndSetElementLength from './findItemDelimitationItem.js';\nimport littleEndianByteArrayParser from './littleEndianByteArrayParser.js';\nimport parseDicom, { LEI, LEE } from './parseDicom.js';\nimport readDicomElementExplicit from './readDicomElementExplicit.js';\nimport readDicomElementImplicit from './readDicomElementImplicit.js';\nimport readEncapsulatedImageFrame from './readEncapsulatedImageFrame.js';\nimport readEncapsulatedPixelData from './readEncapsulatedPixelData.js';\nimport readEncapsulatedPixelDataFromFragments from './readEncapsulatedPixelDataFromFragments.js';\nimport readPart10Header from './readPart10Header.js';\nimport readSequenceItemsExplicit from './readSequenceElementExplicit.js';\nimport readSequenceItemsImplicit from './readSequenceElementImplicit.js';\nimport readSequenceItem from './readSequenceItem.js';\nimport readTag from './readTag.js';\n\nconst dicomParser = {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable,\n  parseDicomDataSetExplicit,\n  parseDicomDataSetImplicit,\n  readFixedString,\n  alloc,\n  version,\n  bigEndianByteArrayParser,\n  ByteStream,\n  sharedCopy,\n  DataSet,\n  findAndSetUNElementLength,\n  findEndOfEncapsulatedElement,\n  findItemDelimitationItemAndSetElementLength,\n  littleEndianByteArrayParser,\n  parseDicom,\n  readDicomElementExplicit,\n  readDicomElementImplicit,\n  readEncapsulatedImageFrame,\n  readEncapsulatedPixelData,\n  readEncapsulatedPixelDataFromFragments,\n  readPart10Header,\n  readSequenceItemsExplicit,\n  readSequenceItemsImplicit,\n  readSequenceItem,\n  readTag,\n  LEI,\n  LEE,\n};\n\nexport {\n  isStringVr,\n  isPrivateTag,\n  parsePN,\n  parseTM,\n  parseDA,\n  explicitElementToString,\n  explicitDataSetToJS,\n  createJPEGBasicOffsetTable,\n  parseDicomDataSetExplicit,\n  parseDicomDataSetImplicit,\n  readFixedString,\n  alloc,\n  version,\n  bigEndianByteArrayParser,\n  ByteStream,\n  sharedCopy,\n  DataSet,\n  findAndSetUNElementLength,\n  findEndOfEncapsulatedElement,\n  findItemDelimitationItemAndSetElementLength,\n  littleEndianByteArrayParser,\n  parseDicom,\n  readDicomElementExplicit,\n  readDicomElementImplicit,\n  readEncapsulatedImageFrame,\n  readEncapsulatedPixelData,\n  readEncapsulatedPixelDataFromFragments,\n  readPart10Header,\n  readSequenceItemsExplicit,\n  readSequenceItemsImplicit,\n  readSequenceItem,\n  readTag\n};\n\nexport default dicomParser;\n"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n"],"names":["module","exports","r","e","AE","AS","AT","CS","DA","DS","DT","FL","FD","IS","LO","LT","OB","OD","OF","OW","PN","SH","SL","SQ","SS","ST","TM","UI","UL","UN","UR","US","UT","d","f","parseInt","isNaN","a","familyName","split","givenName","middleName","prefix","suffix","n","t","length","substring","i","Math","pow","concat","hours","minutes","seconds","fractionalSeconds","o","year","month","day","l","vr","tag","call","toString","string","uint32","toUpperCase","uint16","int16","int32","double","float","u","omitPrivateAttibutes","maxElementLength","elements","items","push","dataSet","s","dataOffset","c","byteArray","m","fragments","position","p","encapsulatedPixelData","hadUndefinedLength","basicOffsetTable","offset","h","readUint16","substr","g","readUint32","seek","y","warnings","b","String","fromCharCode","P","parser","w","this","byteArrayParser","readInt16","readInt32","readFloat","readDouble","match","Value","trim","replace","parseFloat","x","E","A","F","S","D","T","vrCallback","O","B","q","I","U","readFixedString","arguments","untilTag","k","Buffer","alloc","Uint8Array","L","N","Float32Array","buffer","Float64Array","j","slice","byteOffset","J","M","G","TransferSyntaxUID","getSize","x00020010","z","V","Error","Object","prototype","process","inflater","inflateRawSync","copy","pako","inflateRaw","set","exception","hasOwnProperty","R","_","H","Q","W","$","K","console","log","default","isStringVr","isPrivateTag","parsePN","parseTM","parseDA","explicitElementToString","explicitDataSetToJS","createJPEGBasicOffsetTable","parseDicomDataSetExplicit","parseDicomDataSetImplicit","version","bigEndianByteArrayParser","ByteStream","sharedCopy","DataSet","findAndSetUNElementLength","findEndOfEncapsulatedElement","findItemDelimitationItemAndSetElementLength","littleEndianByteArrayParser","parseDicom","readDicomElementExplicit","readDicomElementImplicit","readEncapsulatedImageFrame","readEncapsulatedPixelData","readEncapsulatedPixelDataFromFragments","readPart10Header","readSequenceItemsExplicit","readSequenceItemsImplicit","readSequenceItem","readTag","LEI","LEE","defineProperty","enumerable","get","Symbol","toStringTag","value","__esModule","create","bind","require"],"sourceRoot":""}